import Layout from "@/components/Layout";
import Navbar from "@/components/Navbar";
import Footer from "@/components/sections/Footer";
import { useAuth } from "@/firebase/AuthContext";
import { yupResolver } from "@hookform/resolvers/yup";
import { Poppins } from "next/font/google";
import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import { useState } from "react";
import { useForm } from "react-hook-form";
import { FaHouseUser } from "react-icons/fa";
import { HiEye, HiEyeOff } from "react-icons/hi";
import { ToastContainer } from "react-toastify";
import * as yup from "yup";

const poppins = Poppins({ weight: ["400", "500", "700"], subsets: ["latin"] });
const schema = yup
  .object({
    fullname: yup.string().min(0).required("Fullname is required"),
    email: yup.string().email("Email is invalid").required("Email is required"),
    password: yup
      .string()
      .required("Password is required")
      .matches(
        /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\$%\^&\*])(?=.{8,})/,
        "Password must be min 8 characters, and have 1 Special Character, 1 Uppercase, 1 Number and 1 Lowercase"
      ),
    cpassword: yup
      .string()
      .oneOf([yup.ref("password"), null], "Passwords must match")
      .required("Confirm password is required"),
  })
  .required();

export default function Register() {
  const [showPassword, setShowPassword] = useState(false);
  const [showCpassword, setShowCpassword] = useState(false);
  const { signup, isSignup } = useAuth();
  const router = useRouter();
  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm({
    resolver: yupResolver(schema),
  });
  const onSubmit = (data) => {
    const { email, password, fullname } = data;
    signup(email, password, fullname);
  };
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.png" />
      </Head>
      <Navbar />
      <main className={`${poppins.className}`}>
        <Layout>
          <ToastContainer />
          <div className="bg-gradient-to-r from-green-50 to-green-300 shadow-sm shadow-gray-700 grid sm:grid-cols-2 mt-14 mb-20  px-8 py-10 rounded-md">
            <div>
              <FaHouseUser className="hidden sm:block  sm:text-[16rem] md:text-[20rem] lg:text-[25rem] text-green-800" />
            </div>
            <div className="container w-full">
              <form onSubmit={handleSubmit(onSubmit)}>
                <h1 className="mb-8 text-2xl sm:text-3xl text-center">
                  Create an account
                </h1>
                <div>
                  <input
                    type="text"
                    className="block border border-grey-light w-full p-3 rounded mb-1 focus:outline-dotted"
                    name="fullname"
                    placeholder="Full Name"
                    {...register("fullname")}
                  />
                  <p className="text-sm ml-1 mb-4">
                    {errors.fullname?.message}
                  </p>
                </div>
                <div>
                  <input
                    type="text"
                    className="block border border-grey-light w-full p-3 rounded mb-1 focus:outline-dotted"
                    name="email"
                    placeholder="Email"
                    {...register("email")}
                  />
                  <p className="text-sm ml-1 mb-4">{errors.email?.message}</p>
                </div>
                <div className="relative">
                  <input
                    type={showPassword ? "text" : "password"}
                    className="block border border-grey-light w-full p-3 rounded mb-1 focus:outline-dotted"
                    name="password"
                    placeholder="Password"
                    {...register("password")}
                  />
                  <p className=" text-sm ml-1 mb-4">
                    {errors.password?.message}
                  </p>
                  <div
                    onClick={() => setShowPassword((prev) => !prev)}
                    className="absolute top-4 md:top-3 right-4 z-99 cursor-pointer"
                  >
                    {showPassword ? (
                      <HiEyeOff className="text-xl md:text-2xl" />
                    ) : (
                      <HiEye className="text-xl md:text-2xl" />
                    )}
                  </div>
                </div>
                <div className="relative">
                  <input
                    type={showCpassword ? "text" : "password"}
                    className="block border border-grey-light w-full p-3 rounded mb-1 focus:outline-dotted"
                    name="confirm_password"
                    placeholder="Confirm Password"
                    {...register("cpassword")}
                  />
                  <p className=" text-sm ml-1 mb-4">
                    {errors.cpassword?.message}
                  </p>
                  <div
                    onClick={() => setShowCpassword((prev) => !prev)}
                    className="absolute top-4 md:top-3 right-4 cursor-pointer"
                  >
                    {showCpassword ? (
                      <HiEyeOff className="text-xl md:text-2xl" />
                    ) : (
                      <HiEye className="text-xl md:text-2xl" />
                    )}
                  </div>
                </div>
                <button
                  type="submit"
                  className="w-full text-center py-3 rounded bg-green-500 shadow-sm shadow-black  my-1 font-medium uppercase"
                >
                  {isSignup ? (
                    <>
                      Registering
                      <div className="w-5 h-5 rounded-full border-r-2 border-l-2 border-green-900 animate-spin inline-block ml-2 "></div>
                    </>
                  ) : (
                    "Register"
                  )}
                </button>
                <div className="text-center text-sm text-grey-dark mt-4">
                  By signing up, you agree to the
                  <a
                    className="no-underline border-b border-grey-dark text-grey-dark"
                    href="#"
                  >
                    Terms of Service
                  </a>
                  and
                  <a
                    className="no-underline border-b border-grey-dark text-grey-dark"
                    href="#"
                  >
                    Privacy Policy
                  </a>
                </div>
              </form>
              <div className="text-center">
                Already have an account?
                <Link
                  className="no-underline border-b border-blue text-blue text-red-500"
                  href="/admin/login"
                >
                  Log in
                </Link>
                .
              </div>
            </div>
          </div>
        </Layout>
      </main>
      <Footer />
    </>
  );
}
